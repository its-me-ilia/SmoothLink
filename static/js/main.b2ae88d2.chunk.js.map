{"version":3,"sources":["static/bookmark.svg","static/arrow-left.svg","static/arrow-right.svg","static/search.svg","static/alphabet.svg","static/link.svg","static/black-link.svg","static/active-link.svg","static/copy.svg","static/black-copy.svg","static/active-copy.svg","static/stack-menu.svg","static/human.png","static/human-resp.png","static/logo.svg","components/Intro/Parts/SearchBar/LeftPart/ControlButtons/Buttons.js","components/Reusable/SearchBarBtn/SearchBarBtn.js","components/Intro/Parts/SearchBar/LeftPart/LeftPart.js","components/Intro/Parts/SearchBar/Bar/Parts/CopyBtn/CopyBtn.js","components/Intro/Parts/SearchBar/Bar/Bar.js","components/Intro/Parts/SearchBar/RightPart/RightPart.js","components/Intro/Parts/SearchBar/SearchBar.js","components/Intro/Intro.js","components/404/404.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Buttons","className","SearchBarBtn","props","src","img","LeftPart","leftarrow","rightarrow","bookmark","CopyBtn","linkIcon","window","screen","width","blackLink","link","copyIcon","blackCopy","copy","onClick","shorten","onMouseOver","e","setHovered","onMouseOut","hovered","shortened","alt","activeCopy","activeLink","Bar","useState","setShortened","url","setUrl","console","log","height","abc","search","value","onChange","target","type","placeholder","RightPart","menu","SearchBar","Intro","logo","respbgimg","bgimg","href","NotFound","to","App","exact","path","render","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2ae88d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bookmark.223b4fe7.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-left.68d855d8.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-right.2de0905b.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.4dd9426a.svg\";","module.exports = __webpack_public_path__ + \"static/media/alphabet.776da6d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/link.939ed867.svg\";","module.exports = __webpack_public_path__ + \"static/media/black-link.1deff5c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/active-link.d40d7ee2.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.69e90d54.svg\";","module.exports = __webpack_public_path__ + \"static/media/black-copy.0437f13b.svg\";","module.exports = __webpack_public_path__ + \"static/media/active-copy.49075608.svg\";","module.exports = __webpack_public_path__ + \"static/media/stack-menu.9c92b931.svg\";","module.exports = __webpack_public_path__ + \"static/media/human.a2852700.png\";","module.exports = __webpack_public_path__ + \"static/media/human-resp.628f26c7.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.81a29d7e.svg\";","import React from 'react';\r\nimport './Buttons.css';\r\n\r\nconst Buttons = () => {\r\n    return (\r\n        <div className=\"control-btn-container\">\r\n            <div className=\"control-btn red-btn\"></div>\r\n            <div className=\"control-btn yellow-btn\"></div>\r\n            <div className=\"control-btn green-btn\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport './SearchBarBtn.css';\r\n\r\nconst SearchBarBtn = (props) => {\r\n    return (\r\n        <div className=\"searchbar-btn\">\r\n            <img src={props.img} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBarBtn;","import React from 'react';\r\nimport ControlButtons from './ControlButtons/Buttons';\r\nimport SearchBarBtn from '../../../../Reusable/SearchBarBtn/SearchBarBtn';\r\nimport bookmark from '../../../../../static/bookmark.svg';\r\nimport leftarrow from '../../../../../static/arrow-left.svg';\r\nimport rightarrow from '../../../../../static/arrow-right.svg';\r\nimport './LeftBar.css';\r\n\r\nconst LeftPart = () => {\r\n    return (\r\n        <div className=\"left-part\">\r\n            <ControlButtons />\r\n            <SearchBarBtn img={leftarrow} />\r\n            <SearchBarBtn img={rightarrow} />\r\n            <SearchBarBtn img={bookmark} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeftPart;","import React from 'react';\r\nimport link from \"../../../../../../../static/link.svg\";\r\nimport blackLink from \"../../../../../../../static/black-link.svg\";\r\nimport activeLink from \"../../../../../../../static/active-link.svg\";\r\nimport copy from \"../../../../../../../static/copy.svg\";\r\nimport blackCopy from \"../../../../../../../static/black-copy.svg\";\r\nimport activeCopy from \"../../../../../../../static/active-copy.svg\";\r\nimport PropTypes from 'prop-types';\r\nimport './CopyBtn.css'\r\n\r\nconst CopyBtn = (props) => {\r\n    let linkIcon = window.screen.width <= 768 ? blackLink : link;\r\n    let copyIcon = window.screen.width <= 768 ? blackCopy : copy;\r\n    return (\r\n        <div onClick={props.shorten} onMouseOver={e => props.setHovered(true)} onMouseOut={e => props.setHovered(false)}>\r\n            <img className={`copy-btn ${!props.hovered && 'active-copy' }`} src={props.shortened ? copyIcon : linkIcon} alt=\"Copy\" />\r\n            <img className={`copy-btn ${props.hovered && 'active-copy'}`} src={props.shortened ? activeCopy : activeLink} alt=\"Active Copy\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nCopyBtn.propTypes = {\r\n    shorten: PropTypes.func,\r\n    setHovered: PropTypes.func,\r\n    hovered: PropTypes.bool,\r\n    shortened: PropTypes.bool\r\n};\r\n\r\nexport default CopyBtn;","import React, { useState } from \"react\";\r\nimport search from \"../../../../../static/search.svg\";\r\nimport abc from \"../../../../../static/alphabet.svg\";\r\nimport \"./Bar.css\";\r\nimport CopyBtn from './Parts/CopyBtn/CopyBtn';\r\n\r\nconst Bar = () => {\r\n  const [shortened,setShortened] = useState(false);\r\n  const [hovered,setHovered] = useState(false);\r\n  const [url,setUrl] = useState('');\r\n  const shorten = () => {\r\n    setShortened(!shortened);\r\n  };\r\n  const inputChange = (e) => {\r\n    if(shortened){\r\n      setShortened(false);\r\n    };\r\n    setUrl(e.target.value)\r\n  }\r\n  console.log(window.screen.height)\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <div className=\"search-left-part\">\r\n        <div className=\"search-icon\">\r\n          <img src={window.screen.width <= 768 ? abc : search} alt=\"Search\" />\r\n        </div>\r\n        <div className=\"search-input-container\">\r\n          <input value={url} onChange={inputChange} type=\"url\" placeholder=\"https://example.com\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"copy-btn-container\">\r\n        <CopyBtn shorten={shorten} shortened={shortened} hovered={hovered} setHovered={setHovered} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import React from 'react';\r\nimport SearchBarBtn from '../../../../Reusable/SearchBarBtn/SearchBarBtn';\r\nimport menu from '../../../../../static/stack-menu.svg';\r\n\r\nconst RightPart = () => {\r\n    return (\r\n        <div className=\"right-part\">\r\n            <SearchBarBtn img={menu} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RightPart;","import React from 'react';\r\nimport LeftPart from './LeftPart/LeftPart';\r\nimport Bar from './Bar/Bar';\r\nimport RightPart from './RightPart/RightPart';\r\nimport './SearchBar.css';\r\n\r\nconst SearchBar = () => {\r\n    return (\r\n        <div className=\"search-bar-wrapper\">\r\n            <LeftPart />\r\n            <Bar />\r\n            <RightPart />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport SearchBar from './Parts/SearchBar/SearchBar';\r\nimport './Intro.css';\r\nimport bgimg from '../../static/human.png';\r\nimport respbgimg from '../../static/human-resp.png'\r\nimport logo from '../../static/logo.svg';\r\n\r\nconst Intro = () => {\r\n    return (\r\n        <div className=\"intro-container\">\r\n            <div className=\"logo-container\">\r\n                <img src={logo} alt=\"logo\" />\r\n                <span className=\"logo-text\">Smooth</span><span className=\"logo-text-link\">Link</span>\r\n            </div>\r\n            <div className=\"intro-content\">\r\n                <div className={`intro-bg fadein`}>\r\n                    <img src={window.screen.width <= 1024 ? respbgimg : bgimg} />\r\n                </div>\r\n                <div className=\"intro-text\">\r\n                    <h1>Smoothly Shorten Any URL</h1>\r\n                    <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s</p>\r\n                </div>\r\n                <SearchBar />\r\n            </div>\r\n            <div className=\"copyright\">\r\n                <p>Sketched By <a target=\"_blank\" href=\"https://github.com/its-me-ilia\">Ilia</a></p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Intro;","import React from 'react';\r\nimport './404.css'\r\nimport { Link } from 'react-router-dom';\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"notfound-container\">\r\n            <h1>404</h1>\r\n            <Link to='/'><button>Back To Main</button></Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React from \"react\";\nimport \"./App.css\";\nimport Intro from \"./components/Intro/Intro\";\nimport NotFound from \"./components/404/404\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" render={() => Intro()} />\n        <Route exact path=\"/404\" render={() => NotFound()} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}